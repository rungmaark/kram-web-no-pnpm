// app/api/auth/complete-profile/route.ts
import { NextRequest, NextResponse } from "next/server";
import bcrypt from "bcryptjs";
import { connectToDatabase } from "@/lib/mongodb";
import User from "@/models/User";
import { authOptions } from "@/lib/authOptions";
import { getServerSession } from "next-auth";

export async function POST(req: NextRequest) {
  const session = await getServerSession(authOptions);
  if (!session?.user?.email) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }
  const { username, password } = await req.json();
  const email = session.user.email.toLowerCase();

  await connectToDatabase();

  // ‚úèÔ∏è generate password hash
  const hashedPassword = await bcrypt.hash(password, 10);

  // üîç ‡∏´‡∏≤ user ‡∏ï‡∏≤‡∏° email
  let user = await User.findOne({ email });
  if (!user) {
    // ‚ûï ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà
    user = new User({
      email,
      displayName: session.user.displayName!,
      // ‡πÄ‡∏≠‡∏≤‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≤‡∏Å session ‡∏°‡∏≤‡πÉ‡∏™‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏° schema
    });
  }

  // ‚úèÔ∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï username + password
  user.username = username.trim().toLowerCase();
  user.password = hashedPassword;

  // üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (create ‡∏´‡∏£‡∏∑‡∏≠ update)
  const saved = await user.save();
  console.log("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï user ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", saved);

  return NextResponse.json({ success: true });
}
