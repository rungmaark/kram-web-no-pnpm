// test-complex-search.js
require('dotenv').config();

async function testComplexSearch() {
    console.log('üî• Testing Complex Search Queries...\n');

    const testQueries = [
        '‡πÄ‡∏î‡πá‡∏Å‡∏°‡∏Å.‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡∏´‡∏°‡∏≤ ‡∏ä‡∏≠‡∏ö‡∏Å‡∏¥‡∏ô MK',
        'MK',
        '‡∏ä‡∏≠‡∏ö‡∏´‡∏°‡∏≤',
        '‡∏ä‡∏≠‡∏ö‡∏Å‡∏¥‡∏ô',
        '‡∏ä‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏°',
        '‡∏Ñ‡∏≠‡∏°',
        'coffee lover who plays games',
        'iPhone user ‡∏ä‡∏≠‡∏ö‡∏Å‡∏≤‡πÅ‡∏ü'
    ];

    for (const query of testQueries) {
        console.log(`\n=== Testing: "${query}" ===`);
        
        try {
            const response = await fetch('http://localhost:3000/api/search', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ query })
            });

            if (!response.ok) {
                console.error(`‚ùå HTTP Error: ${response.status}`);
                const errorText = await response.text();
                console.error('Error details:', errorText);
                continue;
            }

            const data = await response.json();
            
            console.log(`üéØ Query Type: ${data.debug.queryType}`);
            console.log(`üìä Results: ${data.users.length} users found`);
            console.log(`üîç Filtering: ${data.debug.filteredCount}/${data.debug.totalCandidates} passed`);
            console.log(`üìà Thresholds: S=${data.debug.thresholds.semantic}, V=${data.debug.thresholds.vector}, F=${data.debug.thresholds.final}`);
            
            if (data.users.length > 0) {
                console.log(`\nüèÜ Top Results:`);
                data.users.slice(0, 3).forEach((user, idx) => {
                    console.log(`${idx + 1}. ${user.displayName} (@${user.username})`);
                    console.log(`   Final: ${user._debug.finalScore?.toFixed(3)}, Semantic: ${user._debug.semanticRelevance?.toFixed(3)}`);
                });
            } else {
                console.log('‚ùå No results found (as expected for strict filtering)');
            }

        } catch (error) {
            console.error(`‚ùå Error testing "${query}":`, error.message);
        }
    }

    console.log('\n‚úÖ Complex Search Testing Complete!');
}

testComplexSearch().catch(console.error);