// lib/socketServer.ts
import { Server as IOServer } from "socket.io";
import type { NextApiResponse, NextApiRequest } from "next";

let ioGlobal: IOServer | undefined;

/* ‡∏Ñ‡∏∑‡∏ô instance (‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ) */
export const getIO = (res?: NextApiResponse): IOServer | undefined => {
  if (!ioGlobal && res) {
    const httpServer: any = (res.socket as any).server;

    ioGlobal = new IOServer(httpServer, {
      path: "/api/socketio",
      addTrailingSlash: false,
    });

    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ event handler ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    ioGlobal.on("connection", (socket) => {
      console.log("üü¢ connect", socket.id);

      socket.on("join", (room) => {
        socket.join(room);
        console.log("üö™ join", socket.id, room);
      });

      socket.on("client_new_message", (msg) => {
        console.log("‚è© client_new_message", socket.id, msg.text);
        ioGlobal?.to(msg.conversationId.toString()).emit("new_message", msg);
      });
    });
  }
  return ioGlobal;
};

/* Next.js API config */
export const config = { api: { bodyParser: false } };

/* /api/socketio route */
export default function handler(req: NextApiRequest, res: NextApiResponse) {
  getIO(res); // bootstrap ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
  res.end();
}
